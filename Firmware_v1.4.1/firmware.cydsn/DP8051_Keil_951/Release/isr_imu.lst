C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE ISR_IMU
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\isr_imu.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\isr_imu.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) 
                    -WL(2) PR(.\DP8051_Keil_951\Release/isr_imu.lst) CD OT(11,SPEED) OJ(.\DP8051_Keil_951\Release\isr_imu.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: isr_imu.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <isr_imu.h>
  22          
  23          
  24          #if !defined(isr_imu__REMOVED) /* Check for removal by optimization */
  25          
  26          /*******************************************************************************
  27          *  Place your includes, defines and code here 
  28          ********************************************************************************/
  29          /* `#START isr_imu_intc` */
  30              
  31          #include <IMU_functions.h>
  32          
  33          extern uint8 N_IMU_Connected;
  34          /*extern uint8 IMU_connected[N_IMU_MAX];
  35          extern uint8 IMU_conf[N_IMU_MAX][5];
  36          extern uint8 imu_send_flag;
  37          extern int imus_data_size;
  38          extern int single_imu_size[N_IMU_MAX];
  39          */
  40              
  41          extern uint8 Accel[N_IMU_MAX][6];
  42          extern uint8 Gyro[N_IMU_MAX][6];
  43          extern uint8 Mag[N_IMU_MAX][6];   
  44          extern uint8 end_imu_reading;
  45              /*
  46              extern struct st_imu g_imu[N_IMU_MAX];
  47          
  48          extern float scaleAccFactor; 
  49          extern float scaleGyroFactor;
  50          extern float scaleMagFactor;
  51          */
  52          /* `#END` */
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 2   

  53          
  54          
  55          /*******************************************************************************
  56          * Function Name: isr_imu_Start
  57          ********************************************************************************
  58          *
  59          * Summary:
  60          *  Set up the interrupt and enable it. This function disables the interrupt, 
  61          *  sets the default interrupt vector, sets the priority from the value in the
  62          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
  63          *  interrupt controller.
  64          *
  65          * Parameters:  
  66          *   None
  67          *
  68          * Return:
  69          *   None
  70          *
  71          *******************************************************************************/
  72          void isr_imu_Start(void) 
  73          {
  74   1          /* For all we know the interrupt is active. */
  75   1          isr_imu_Disable();
  76   1      
  77   1          /* Set the ISR to point to the isr_imu Interrupt. */
  78   1          isr_imu_SetVector(&isr_imu_Interrupt);
  79   1      
  80   1          /* Set the priority. */
  81   1          isr_imu_SetPriority((uint8)isr_imu_INTC_PRIOR_NUMBER);
  82   1      
  83   1          /* Enable it. */
  84   1          isr_imu_Enable();
  85   1      }
  86          
  87          
  88          /*******************************************************************************
  89          * Function Name: isr_imu_StartEx
  90          ********************************************************************************
  91          *
  92          * Summary:
  93          *  Sets up the interrupt and enables it. This function disables the interrupt,
  94          *  sets the interrupt vector based on the address passed in, sets the priority 
  95          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  96          *  the interrupt to the interrupt controller.
  97          *  
  98          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  99          *  used to provide consistent definition across compilers:
 100          *  
 101          *  Function definition example:
 102          *   CY_ISR(MyISR)
 103          *   {
 104          *   }
 105          *   Function prototype example:
 106          *   CY_ISR_PROTO(MyISR);
 107          *
 108          * Parameters:  
 109          *   address: Address of the ISR to set in the interrupt vector table.
 110          *
 111          * Return:
 112          *   None
 113          *
 114          *******************************************************************************/
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 3   

 115          void isr_imu_StartEx(cyisraddress address) 
 116          {
 117   1          /* For all we know the interrupt is active. */
 118   1          isr_imu_Disable();
 119   1      
 120   1          /* Set the ISR to point to the isr_imu Interrupt. */
 121   1          isr_imu_SetVector(address);
 122   1      
 123   1          /* Set the priority. */
 124   1          isr_imu_SetPriority((uint8)isr_imu_INTC_PRIOR_NUMBER);
 125   1      
 126   1          /* Enable it. */
 127   1          isr_imu_Enable();
 128   1      }
 129          
 130          
 131          /*******************************************************************************
 132          * Function Name: isr_imu_Stop
 133          ********************************************************************************
 134          *
 135          * Summary:
 136          *   Disables and removes the interrupt.
 137          *
 138          * Parameters:  
 139          *   None
 140          *
 141          * Return:
 142          *   None
 143          *
 144          *******************************************************************************/
 145          void isr_imu_Stop(void) 
 146          {
 147   1          /* Disable this interrupt. */
 148   1          isr_imu_Disable();
 149   1      }
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: isr_imu_Interrupt
 154          ********************************************************************************
 155          *
 156          * Summary:
 157          *   The default Interrupt Service Routine for isr_imu.
 158          *
 159          *   Add custom code between the START and END comments to keep the next version
 160          *   of this file from over-writing your code.
 161          *
 162          *   Note You may use either the default ISR by using this API, or you may define
 163          *   your own separate ISR through ISR_StartEx().
 164          *
 165          * Parameters:  
 166          *   None
 167          *
 168          * Return:
 169          *   None
 170          *
 171          *******************************************************************************/
 172          CY_ISR(isr_imu_Interrupt)
 173          {
 174   1          #ifdef isr_imu_INTERRUPT_INTERRUPT_CALLBACK
                      isr_imu_Interrupt_InterruptCallback();
                  #endif /* isr_imu_INTERRUPT_INTERRUPT_CALLBACK */
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 4   

 177   1      
 178   1          /*  Place your Interrupt code here. */
 179   1          /* `#START isr_imu_Interrupt` */
 180   1      
 181   1          static uint8 k_imu = 0;
 182   1      //    static struct st_imu g_imuTMP[N_IMU_MAX];
 183   1      //    uint16 tmp = 0;
 184   1              for (k_imu = 0; k_imu < N_IMU_Connected; k_imu++) {
 185   2                  // Read k_imu IMU
 186   2                  ChipSelector(IMU_connected[k_imu]);
 187   2                  ReadIMU(IMU_connected[k_imu]);   
 188   2              }
 189   1              end_imu_reading = TRUE;
 190   1         
 191   1      /*   
 192   1          tmp = Accel[IMU_connected[k_imu]][0];
 193   1          g_imuTMP[k_imu].accel_value[0] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][1]);
 194   1          tmp = Accel[IMU_connected[k_imu]][2];
 195   1          g_imuTMP[k_imu].accel_value[1] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][3]);
 196   1          tmp = Accel[IMU_connected[k_imu]][4];
 197   1          g_imuTMP[k_imu].accel_value[2] = (int16)(tmp<<8 | Accel[IMU_connected[k_imu]][5]);
 198   1          
 199   1          tmp = Gyro[IMU_connected[k_imu]][0];
 200   1          g_imuTMP[k_imu].gyro_value[0] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][1]);
 201   1          tmp = Gyro[IMU_connected[k_imu]][2];
 202   1          g_imuTMP[k_imu].gyro_value[1] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][3]);
 203   1          tmp = Gyro[IMU_connected[k_imu]][4];
 204   1          g_imuTMP[k_imu].gyro_value[2] = (int16)(tmp<<8 | Gyro[IMU_connected[k_imu]][5]);
 205   1          
 206   1          tmp = Mag[IMU_connected[k_imu]][0];
 207   1          g_imuTMP[k_imu].mag_value[0] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][1]);
 208   1          tmp = Mag[IMU_connected[k_imu]][2];
 209   1          g_imuTMP[k_imu].mag_value[1] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][3]);
 210   1          tmp = Mag[IMU_connected[k_imu]][4];
 211   1          g_imuTMP[k_imu].mag_value[2] = (int16)(tmp<<8 | Mag[IMU_connected[k_imu]][5]);
 212   1          
 213   1          k_imu = (k_imu+1)%N_IMU_Connected;
 214   1          
 215   1          // A whole reading has been done (7 bytes for each IMU)
 216   1          if (k_imu == 0){
 217   1              memcpy( &g_imuNew, &g_imuTMP, sizeof(g_imuTMP) );
 218   1          }
 219   1       */ 
 220   1          
 221   1          /* `#END` */
 222   1      
 223   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 224   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 225   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (isr_imu__ES2_PATCH ))      
                          isr_imu_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 228   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 229   1      }
 230          
 231          
 232          /*******************************************************************************
 233          * Function Name: isr_imu_SetVector
 234          ********************************************************************************
 235          *
 236          * Summary:
 237          *   Change the ISR vector for the Interrupt. Note calling isr_imu_Start
 238          *   will override any effect this method would have had. To set the vector 
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 5   

 239          *   before the component has been started use isr_imu_StartEx instead.
 240          * 
 241          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 242          *   used to provide consistent definition across compilers:
 243          *
 244          *   Function definition example:
 245          *   CY_ISR(MyISR)
 246          *   {
 247          *   }
 248          *
 249          *   Function prototype example:
 250          *     CY_ISR_PROTO(MyISR);
 251          *
 252          * Parameters:
 253          *   address: Address of the ISR to set in the interrupt vector table.
 254          *
 255          * Return:
 256          *   None
 257          *
 258          *******************************************************************************/
 259          void isr_imu_SetVector(cyisraddress address) 
 260          {
 261   1          CY_SET_REG16(isr_imu_INTC_VECTOR, (uint16) address);
 262   1      }
 263          
 264          
 265          /*******************************************************************************
 266          * Function Name: isr_imu_GetVector
 267          ********************************************************************************
 268          *
 269          * Summary:
 270          *   Gets the "address" of the current ISR vector for the Interrupt.
 271          *
 272          * Parameters:
 273          *   None
 274          *
 275          * Return:
 276          *   Address of the ISR in the interrupt vector table.
 277          *
 278          *******************************************************************************/
 279          cyisraddress isr_imu_GetVector(void) 
 280          {
 281   1          return (cyisraddress) CY_GET_REG16(isr_imu_INTC_VECTOR);
 282   1      }
 283          
 284          
 285          /*******************************************************************************
 286          * Function Name: isr_imu_SetPriority
 287          ********************************************************************************
 288          *
 289          * Summary:
 290          *   Sets the Priority of the Interrupt. 
 291          *
 292          *   Note calling isr_imu_Start or isr_imu_StartEx will 
 293          *   override any effect this API would have had. This API should only be called
 294          *   after isr_imu_Start or isr_imu_StartEx has been called. 
 295          *   To set the initial priority for the component, use the Design-Wide Resources
 296          *   Interrupt Editor.
 297          *
 298          *   Note This API has no effect on Non-maskable interrupt NMI).
 299          *
 300          * Parameters:
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 6   

 301          *   priority: Priority of the interrupt, 0 being the highest priority
 302          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 303          *             PSoC 4: Priority is from 0 to 3.
 304          *
 305          * Return:
 306          *   None
 307          *
 308          *******************************************************************************/
 309          void isr_imu_SetPriority(uint8 priority) 
 310          {
 311   1          *isr_imu_INTC_PRIOR = priority << 5;
 312   1      }
 313          
 314          
 315          /*******************************************************************************
 316          * Function Name: isr_imu_GetPriority
 317          ********************************************************************************
 318          *
 319          * Summary:
 320          *   Gets the Priority of the Interrupt.
 321          *
 322          * Parameters:
 323          *   None
 324          *
 325          * Return:
 326          *   Priority of the interrupt, 0 being the highest priority
 327          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 328          *    PSoC 4: Priority is from 0 to 3.
 329          *
 330          *******************************************************************************/
 331          uint8 isr_imu_GetPriority(void) 
 332          {
 333   1          uint8 priority;
 334   1      
 335   1      
 336   1          priority = *isr_imu_INTC_PRIOR >> 5;
 337   1      
 338   1          return priority;
 339   1      }
 340          
 341          
 342          /*******************************************************************************
 343          * Function Name: isr_imu_Enable
 344          ********************************************************************************
 345          *
 346          * Summary:
 347          *   Enables the interrupt to the interrupt controller. Do not call this function
 348          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 349          *   function, which sets the vector and the priority, has been called.
 350          *
 351          * Parameters:
 352          *   None
 353          *
 354          * Return:
 355          *   None
 356          *
 357          *******************************************************************************/
 358          void isr_imu_Enable(void) 
 359          {
 360   1          /* Enable the general interrupt. */
 361   1          *isr_imu_INTC_SET_EN = isr_imu__INTC_MASK;
 362   1      }
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 7   

 363          
 364          
 365          /*******************************************************************************
 366          * Function Name: isr_imu_GetState
 367          ********************************************************************************
 368          *
 369          * Summary:
 370          *   Gets the state (enabled, disabled) of the Interrupt.
 371          *
 372          * Parameters:
 373          *   None
 374          *
 375          * Return:
 376          *   1 if enabled, 0 if disabled.
 377          *
 378          *******************************************************************************/
 379          uint8 isr_imu_GetState(void) 
 380          {
 381   1          /* Get the state of the general interrupt. */
 382   1          return ((*isr_imu_INTC_SET_EN & (uint8)isr_imu__INTC_MASK) != 0u) ? 1u:0u;
 383   1      }
 384          
 385          
 386          /*******************************************************************************
 387          * Function Name: isr_imu_Disable
 388          ********************************************************************************
 389          *
 390          * Summary:
 391          *   Disables the Interrupt in the interrupt controller.
 392          *
 393          * Parameters:
 394          *   None
 395          *
 396          * Return:
 397          *   None
 398          *
 399          *******************************************************************************/
 400          void isr_imu_Disable(void) 
 401          {
 402   1          /* Disable the general interrupt. */
 403   1          *isr_imu_INTC_CLR_EN = isr_imu__INTC_MASK;
 404   1      }
 405          
 406          
 407          /*******************************************************************************
 408          * Function Name: isr_imu_SetPending
 409          ********************************************************************************
 410          *
 411          * Summary:
 412          *   Causes the Interrupt to enter the pending state, a software method of
 413          *   generating the interrupt.
 414          *
 415          * Parameters:
 416          *   None
 417          *
 418          * Return:
 419          *   None
 420          *
 421          * Side Effects:
 422          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 423          *   entered (depending on the priority of this interrupt and other pending 
 424          *   interrupts).
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 8   

 425          *
 426          *******************************************************************************/
 427          void isr_imu_SetPending(void) 
 428          {
 429   1          *isr_imu_INTC_SET_PD = isr_imu__INTC_MASK;
 430   1      }
 431          
 432          
 433          /*******************************************************************************
 434          * Function Name: isr_imu_ClearPending
 435          ********************************************************************************
 436          *
 437          * Summary:
 438          *   Clears a pending interrupt in the interrupt controller.
 439          *
 440          *   Note Some interrupt sources are clear-on-read and require the block 
 441          *   interrupt/status register to be read/cleared with the appropriate block API 
 442          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 443          *   pending state even though the interrupt itself is cleared using this API.
 444          *
 445          * Parameters:
 446          *   None
 447          *
 448          * Return:
 449          *   None
 450          *
 451          *******************************************************************************/
 452          void isr_imu_ClearPending(void) 
 453          {
 454   1          *isr_imu_INTC_CLR_PD = isr_imu__INTC_MASK;
 455   1      }
 456          
 457          #endif /* End check for removal by optimization */
 458          
 459          
 460          /* [] END OF FILE */
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_imu_Start (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 75
0000 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 78
0003 7E00        R     MOV     R6,#HIGH isr_imu_Interrupt
0005 7F00        R     MOV     R7,#LOW isr_imu_Interrupt
0007 120000      R     LCALL   _isr_imu_SetVector
                                           ; SOURCE LINE # 81
000A 7F05              MOV     R7,#05H
000C 120000      R     LCALL   _isr_imu_SetPriority
                                           ; SOURCE LINE # 84
000F 120000      R     LCALL   isr_imu_Enable
                                           ; SOURCE LINE # 85
0012 22                RET     
             ; FUNCTION isr_imu_Start (END)

             ; FUNCTION _isr_imu_StartEx (BEGIN)
                                           ; SOURCE LINE # 115
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 118
0008 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 121
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _isr_imu_SetVector
                                           ; SOURCE LINE # 124
0016 7F05              MOV     R7,#05H
0018 120000      R     LCALL   _isr_imu_SetPriority
                                           ; SOURCE LINE # 127
001B 120000      R     LCALL   isr_imu_Enable
                                           ; SOURCE LINE # 128
001E 22                RET     
             ; FUNCTION _isr_imu_StartEx (END)

             ; FUNCTION isr_imu_Stop (BEGIN)
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
0000 120000      R     LCALL   isr_imu_Disable
                                           ; SOURCE LINE # 149
0003 22                RET     
             ; FUNCTION isr_imu_Stop (END)

             ; FUNCTION isr_imu_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 10  

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 184
002B 900000      R     MOV     DPTR,#k_imu
002E E4                CLR     A
002F F0                MOVX    @DPTR,A
0030         ?C0004:
0030 900000      E     MOV     DPTR,#N_IMU_Connected
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#k_imu
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
003A C3                CLR     C
003B 9F                SUBB    A,R7
003C 502D              JNC     ?C0005
                                           ; SOURCE LINE # 186
003E 7400        E     MOV     A,#LOW IMU_connected
0040 2E                ADD     A,R6
0041 F582              MOV     DPL,A
0043 E4                CLR     A
0044 3400        E     ADDC    A,#HIGH IMU_connected
0046 F583              MOV     DPH,A
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A 7E00              MOV     R6,#00H
004C 120000      E     LCALL   _ChipSelector
                                           ; SOURCE LINE # 187
004F 900000      R     MOV     DPTR,#k_imu
0052 E0                MOVX    A,@DPTR
0053 2400        E     ADD     A,#LOW IMU_connected
0055 F582              MOV     DPL,A
0057 E4                CLR     A
0058 3400        E     ADDC    A,#HIGH IMU_connected
005A F583              MOV     DPH,A
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 7E00              MOV     R6,#00H
0060 120000      E     LCALL   _ReadIMU
                                           ; SOURCE LINE # 188
0063 900000      R     MOV     DPTR,#k_imu
0066 E0                MOVX    A,@DPTR
0067 04                INC     A
0068 F0                MOVX    @DPTR,A
0069 80C5              SJMP    ?C0004
006B         ?C0005:
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 11  

                                           ; SOURCE LINE # 189
006B 900000      E     MOV     DPTR,#end_imu_reading
006E 7401              MOV     A,#01H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0071 D007              POP     AR7
0073 D006              POP     AR6
0075 D005              POP     AR5
0077 D004              POP     AR4
0079 D003              POP     AR3
007B D002              POP     AR2
007D D001              POP     AR1
007F D000              POP     AR0
0081 D0D0              POP     PSW
0083 D000        E     POP     ?C?XPAGE1SFR
0085 D086              POP     DPS
0087 D084              POP     DPL1
0089 D085              POP     DPH1
008B D082              POP     DPL
008D D083              POP     DPH
008F D0F0              POP     B
0091 D0E0              POP     ACC
0093 32                RETI    
             ; FUNCTION isr_imu_Interrupt (END)

             ; FUNCTION _isr_imu_SetVector (BEGIN)
                                           ; SOURCE LINE # 259
;---- Variable 'address' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 AD07              MOV     R5,AR7
0008 AC06              MOV     R4,AR6
000A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 262
000D 22                RET     
             ; FUNCTION _isr_imu_SetVector (END)

             ; FUNCTION isr_imu_GetVector (BEGIN)
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7904              MOV     R1,#04H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 282
0009         ?C0009:
0009 22                RET     
             ; FUNCTION isr_imu_GetVector (END)

             ; FUNCTION _isr_imu_SetPriority (BEGIN)
                                           ; SOURCE LINE # 309
;---- Variable 'priority' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 33                RLC     A
0003 54E0              ANL     A,#0E0H
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 12  

0005 904482            MOV     DPTR,#04482H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0009 22                RET     
             ; FUNCTION _isr_imu_SetPriority (END)

             ; FUNCTION isr_imu_GetPriority (BEGIN)
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 336
0000 904482            MOV     DPTR,#04482H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 C4                SWAP    A
0006 13                RRC     A
0007 5407              ANL     A,#07H
0009 FF                MOV     R7,A
;---- Variable 'priority' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
000A         ?C0011:
000A 22                RET     
             ; FUNCTION isr_imu_GetPriority (END)

             ; FUNCTION isr_imu_Enable (BEGIN)
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 361
0000 9044C0            MOV     DPTR,#044C0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
0006 22                RET     
             ; FUNCTION isr_imu_Enable (END)

             ; FUNCTION isr_imu_GetState (BEGIN)
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 30E204            JNB     ACC.2,?C0013
0007 7F01              MOV     R7,#01H
0009 8002              SJMP    ?C0014
000B         ?C0013:
000B 7F00              MOV     R7,#00H
000D         ?C0014:
                                           ; SOURCE LINE # 383
000D         ?C0015:
000D 22                RET     
             ; FUNCTION isr_imu_GetState (END)

             ; FUNCTION isr_imu_Disable (BEGIN)
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 403
0000 9044C8            MOV     DPTR,#044C8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
0006 22                RET     
             ; FUNCTION isr_imu_Disable (END)
C51 COMPILER V9.51   ISR_IMU                                                               02/06/2018 09:37:08 PAGE 13  


             ; FUNCTION isr_imu_SetPending (BEGIN)
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0000 9044D0            MOV     DPTR,#044D0H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0006 22                RET     
             ; FUNCTION isr_imu_SetPending (END)

             ; FUNCTION isr_imu_ClearPending (BEGIN)
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0000 9044D8            MOV     DPTR,#044D8H
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
0006 22                RET     
             ; FUNCTION isr_imu_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    289    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
