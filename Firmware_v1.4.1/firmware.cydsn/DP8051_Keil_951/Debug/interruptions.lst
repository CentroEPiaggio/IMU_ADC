C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPTIONS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\interruptions.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -interruptions.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951\D
                    -ebug/interruptions.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\interruptions.obj)

line level    source

   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017-2018, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          /**
  36          * \file         interruptions.c
  37          *
  38          * \brief        Interruption functions are in this file.
  39          * \date         February 01, 2018
  40          * \author       _Centro "E.Piaggio"_
  41          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42          * \copyright    (C) 2017-2018 Centro "E.Piaggio". All rights reserved.
  43          */
  44          
  45          
  46          //=================================================================     includes
  47          #include "interruptions.h"
  48          #include "command_processing.h"
  49          #include "globals.h"
  50          #include "utils.h"
  51          #include "IMU_functions.h"
  52          
  53          //==============================================================================
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 2   

  54          //                                                            RS485 RX INTERRUPT
  55          //==============================================================================
  56          // Processing RS-485 data frame:
  57          //
  58          // - 0:     Waits for beggining characters
  59          // - 1:     Waits for ID;
  60          // - 2:     Data length;
  61          // - 3:     Receive all bytes;
  62          // - 4:     Wait for another device end of transmission;
  63          //
  64          //==============================================================================
  65          
  66          //==============================================================================
  67          //                                                            RS485 RX INTERRUPT
  68          //==============================================================================
  69          
  70          CY_ISR(ISR_RS485_RX_ExInterrupt) {
  71   1      
  72   1          // Set RS485 flag
  73   1          
  74   1          interrupt_flag = TRUE;
  75   1           
  76   1      }
  77          
  78          //==============================================================================
  79          //                                                             INTERRUPT MANAGER
  80          //==============================================================================
  81          // Manage interrupt from RS485 
  82          //==============================================================================
  83          // Processing RS-485 data frame:
  84          //
  85          // - WAIT_START:    Waits for beginning characters;
  86          // - WAIT_ID:       Waits for ID;
  87          // - WAIT_LENGTH:   Data length;
  88          // - RECEIVE:       Receive all bytes;
  89          // - UNLOAD:        Wait for another device end of transmission;
  90          //
  91          //==============================================================================
  92          
  93          void interrupt_manager(){
  94   1      
  95   1          
  96   1          //===========================================     local variables definition
  97   1      
  98   1          static uint8 CYDATA state = WAIT_START;                      // state
  99   1          
 100   1          //------------------------------------------------- local data packet
 101   1          static uint8 CYDATA data_packet_index;
 102   1          static uint8 CYDATA data_packet_length;
 103   1          static uint8 data_packet_buffer[128];                     
 104   1          static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 105   1          //-------------------------------------------------
 106   1      
 107   1          uint8 CYDATA    rx_data;                            // RS485 UART rx data
 108   1          CYBIT           rx_data_type;                       // my id?
 109   1          uint8 CYDATA    package_count = 0;                     
 110   1      
 111   1          //======================================================     receive routine
 112   1          
 113   1          // Get data until buffer is not empty 
 114   1          
 115   1          while(UART_RS485_GetRxBufferSize() && (package_count < 6)){  
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 3   

 116   2              // 6 stima di numero massimo di pacchetti che riesco a leggere senza bloccare l'esecuzione del fir
             -mware
 117   2              
 118   2              // Get next char
 119   2              rx_data = UART_RS485_GetChar();
 120   2              
 121   2              switch (state) {
 122   3                  //-----     wait for frame start     -------------------------------
 123   3                  case WAIT_START:
 124   3                  
 125   3                      rx_queue[0] = rx_queue[1];
 126   3                      rx_queue[1] = rx_queue[2];
 127   3                      rx_queue[2] = rx_data;
 128   3                      
 129   3                      // Check for header configuration package
 130   3                      if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 131   4                          rx_queue[0] = 0;
 132   4                          rx_queue[1] = 0;
 133   4                          rx_queue[2] = 0;
 134   4                          state       = WAIT_ID;                    
 135   4                      }else
 136   3                          if ((rx_queue[0] == 63) &&      //ASCII - ?
 137   3                              (rx_queue[1] == 13) &&      //ASCII - CR
 138   3                              (rx_queue[2] == 10))        //ASCII - LF)
 139   3                              infoGet(INFO_ALL);
 140   3                      break;
 141   3      
 142   3                  //-----     wait for id     ----------------------------------------
 143   3                  case  WAIT_ID:
 144   3      
 145   3                      // packet is for my ID or is broadcast
 146   3                      if (rx_data == c_mem.id || rx_data == 0)
 147   3                          rx_data_type = FALSE;
 148   3                      else                //packet is for others
 149   3                          rx_data_type = TRUE;
 150   3                      
 151   3                      data_packet_length = 0;
 152   3                      state = WAIT_LENGTH;
 153   3                      break;
 154   3      
 155   3                  //-----     wait for length     ------------------------------------
 156   3                  case  WAIT_LENGTH:
 157   3      
 158   3       
 159   3                      data_packet_length = rx_data;
 160   3                      // check validity of pack length
 161   3                      if (data_packet_length <= 1) {
 162   4                          data_packet_length = 0;
 163   4                          state = WAIT_START;
 164   4                      } else if (data_packet_length > 128) {
 165   4                          data_packet_length = 0;
 166   4                          state = WAIT_START;
 167   4                      } else {
 168   4                          data_packet_index = 0;
 169   4                          
 170   4                          if(rx_data_type == FALSE)
 171   4                              state = RECEIVE;          // packet for me or broadcast
 172   4                          else
 173   4                              state = UNLOAD;           // packet for others
 174   4                      }
 175   3                      break;
 176   3      
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 4   

 177   3                  //-----     receiving     -------------------------------------------
 178   3                  case RECEIVE:
 179   3      
 180   3                      data_packet_buffer[data_packet_index] = rx_data;
 181   3                      data_packet_index++;
 182   3                      
 183   3                      // check end of transmission
 184   3                      if (data_packet_index >= data_packet_length) {
 185   4                          // verify if frame ID corresponded to the device ID
 186   4                          if (rx_data_type == FALSE) {
 187   5                              // copying data from buffer to global packet
 188   5                              memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 189   5                              g_rx.length = data_packet_length;
 190   5                              g_rx.ready  = 1;
 191   5                              commProcess();
 192   5                          }
 193   4                          
 194   4                          data_packet_index  = 0;
 195   4                          data_packet_length = 0;
 196   4                          state              = WAIT_START;
 197   4                          package_count++;
 198   4                      
 199   4                      }
 200   3                      break;
 201   3      
 202   3                  //-----     other device is receving     ---------------------------
 203   3                  case UNLOAD:
 204   3                      if (!(--data_packet_length)) {
 205   4                          data_packet_index  = 0;
 206   4                          data_packet_length = 0;
 207   4                          RS485_CTS_Write(1);
 208   4                          RS485_CTS_Write(0);
 209   4                          state              = WAIT_START;
 210   4                          package_count++;
 211   4                      }
 212   3                      break;
 213   3              }
 214   2          }
 215   1      }
 216          //==============================================================================
 217          //                                                            FUNCTION SCHEDULER
 218          //==============================================================================
 219          // Call all the function with the right frequency
 220          //==============================================================================
 221          // Base frequency 1000 Hz
 222          //==============================================================================
 223          
 224          void function_scheduler() {
 225   1       
 226   1          timer_value0 = (uint32)MY_TIMER_ReadCounter();
 227   1          
 228   1          // Start ADC Conversion, SOC = 1
 229   1          ADC_SOC_Write(0x01); 
 230   1          
 231   1          // Check Interrupt 
 232   1      
 233   1          if (interrupt_flag){
 234   2              interrupt_flag = FALSE;
 235   2              interrupt_manager();
 236   2          }
 237   1      
 238   1          ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 5   

 239   1          
 240   1          analog_read_end();
 241   1      
 242   1          if (interrupt_flag){
 243   2              interrupt_flag = FALSE;
 244   2              interrupt_manager();
 245   2          }
 246   1          
 247   1          //---------------------------------- Update States     
 248   1          memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 249   1          
 250   1          if (interrupt_flag){
 251   2              interrupt_flag = FALSE;
 252   2              interrupt_manager();
 253   2          }
 254   1      
 255   1          timer_value = (uint32)MY_TIMER_ReadCounter();
 256   1          MY_TIMER_WriteCounter(5000000);
 257   1      
 258   1      }
 259          
 260          //==============================================================================
 261          //                                                           ANALOG MEASUREMENTS
 262          //==============================================================================
 263          
 264          void analog_read_end() {
 265   1             
 266   1          while(!ADC_STATUS_Read()){
 267   2              if (interrupt_flag){
 268   3                  interrupt_flag = FALSE;
 269   3                  interrupt_manager();
 270   3              }
 271   2          }
 272   1          
 273   1          sensor_value_1 = ADC_buf[0];
 274   1          sensor_value_2 = ADC_buf[1];
 275   1          
 276   1          if (interrupt_flag){
 277   2              interrupt_flag = FALSE;
 278   2              interrupt_manager();
 279   2          }
 280   1      
 281   1       }
 282          
 283          
 284          /* [] END OF FILE */
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ISR_RS485_RX_ExInterrupt (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 74
0000 D200        E     SETB    interrupt_flag
                                           ; SOURCE LINE # 76
0002 32                RETI    
             ; FUNCTION ISR_RS485_RX_ExInterrupt (END)

             ; FUNCTION interrupt_manager (BEGIN)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 109
0000 750000      R     MOV     package_count,#00H
0003         ?C0002:
                                           ; SOURCE LINE # 115
0003 120000      E     LCALL   UART_RS485_GetRxBufferSize
0006 EF                MOV     A,R7
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0025
000C E500        R     MOV     A,package_count
000E C3                CLR     C
000F 9406              SUBB    A,#06H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0025
                                           ; SOURCE LINE # 119
0016 120000      E     LCALL   UART_RS485_GetChar
0019 8F00        R     MOV     rx_data,R7
                                           ; SOURCE LINE # 121
001B E500        R     MOV     A,state
001D 120000      E     LCALL   ?C?CCASE
0020 0000        R     DW      ?C0005
0022 00                DB      00H
0023 0000        R     DW      ?C0009
0025 01                DB      01H
0026 0000        R     DW      ?C0013
0028 02                DB      02H
0029 0000        R     DW      ?C0020
002B 03                DB      03H
002C 0000        R     DW      ?C0023
002E 04                DB      04H
002F 0000              DW      00H
0031 0000        R     DW      ?C0002
                                           ; SOURCE LINE # 123
0033         ?C0005:
                                           ; SOURCE LINE # 125
0033 850000      R     MOV     rx_queue,rx_queue+01H
                                           ; SOURCE LINE # 126
0036 850000      R     MOV     rx_queue+01H,rx_queue+02H
                                           ; SOURCE LINE # 127
0039 850000      R     MOV     rx_queue+02H,rx_data
                                           ; SOURCE LINE # 130
003C E500        R     MOV     A,rx_queue+01H
003E B43A13            CJNE    A,#03AH,?C0006
0041 E500        R     MOV     A,rx_queue+02H
0043 B43A0E            CJNE    A,#03AH,?C0006
                                           ; SOURCE LINE # 131
0046 750000      R     MOV     rx_queue,#00H
                                           ; SOURCE LINE # 132
0049 750000      R     MOV     rx_queue+01H,#00H
                                           ; SOURCE LINE # 133
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 7   

004C 750000      R     MOV     rx_queue+02H,#00H
                                           ; SOURCE LINE # 134
004F 750001      R     MOV     state,#01H
                                           ; SOURCE LINE # 135
0052 80AF              SJMP    ?C0002
0054         ?C0006:
                                           ; SOURCE LINE # 136
0054 E500        R     MOV     A,rx_queue
0056 B43FAA            CJNE    A,#03FH,?C0002
0059 E500        R     MOV     A,rx_queue+01H
005B B40DA5            CJNE    A,#0DH,?C0002
005E E500        R     MOV     A,rx_queue+02H
0060 B40AA0            CJNE    A,#0AH,?C0002
                                           ; SOURCE LINE # 139
0063 7F00              MOV     R7,#00H
0065 7E00              MOV     R6,#00H
0067 120000      E     LCALL   _infoGet
                                           ; SOURCE LINE # 140
006A 8097              SJMP    ?C0002
                                           ; SOURCE LINE # 143
006C         ?C0009:
                                           ; SOURCE LINE # 146
006C 900000      E     MOV     DPTR,#c_mem+01H
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 E500        R     MOV     A,rx_data
0073 6F                XRL     A,R7
0074 6004              JZ      ?C0011
0076 E500        R     MOV     A,rx_data
0078 7004              JNZ     ?C0010
007A         ?C0011:
                                           ; SOURCE LINE # 147
007A C200        R     CLR     rx_data_type
007C 8002              SJMP    ?C0012
007E         ?C0010:
                                           ; SOURCE LINE # 149
007E D200        R     SETB    rx_data_type
0080         ?C0012:
                                           ; SOURCE LINE # 151
0080 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 152
0083 750002      R     MOV     state,#02H
                                           ; SOURCE LINE # 153
0086 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 156
0089         ?C0013:
                                           ; SOURCE LINE # 159
0089 850000      R     MOV     data_packet_length,rx_data
                                           ; SOURCE LINE # 161
008C E500        R     MOV     A,data_packet_length
008E D3                SETB    C
008F 9401              SUBB    A,#01H
0091 5009              JNC     ?C0014
                                           ; SOURCE LINE # 162
0093 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 163
0096 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 164
0099 020000      R     LJMP    ?C0002
009C         ?C0014:
009C E500        R     MOV     A,data_packet_length
009E D3                SETB    C
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 8   

009F 9480              SUBB    A,#080H
00A1 4009              JC      ?C0016
                                           ; SOURCE LINE # 165
00A3 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 166
00A6 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 167
00A9 020000      R     LJMP    ?C0002
00AC         ?C0016:
                                           ; SOURCE LINE # 168
00AC 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 170
00AF 200006            JB      rx_data_type,?C0018
                                           ; SOURCE LINE # 171
00B2 750003      R     MOV     state,#03H
00B5 020000      R     LJMP    ?C0002
00B8         ?C0018:
                                           ; SOURCE LINE # 173
00B8 750004      R     MOV     state,#04H
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
00BB 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 178
00BE         ?C0020:
                                           ; SOURCE LINE # 180
00BE AF00        R     MOV     R7,data_packet_index
00C0 7400        R     MOV     A,#LOW data_packet_buffer
00C2 2F                ADD     A,R7
00C3 F582              MOV     DPL,A
00C5 E4                CLR     A
00C6 3400        R     ADDC    A,#HIGH data_packet_buffer
00C8 F583              MOV     DPH,A
00CA E500        R     MOV     A,rx_data
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
00CD 0500        R     INC     data_packet_index
                                           ; SOURCE LINE # 184
00CF E500        R     MOV     A,data_packet_index
00D1 C3                CLR     C
00D2 9500        R     SUBB    A,data_packet_length
00D4 5003              JNC     $ + 5H
00D6 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 186
00D9 20003A            JB      rx_data_type,?C0022
                                           ; SOURCE LINE # 188
00DC AF00        R     MOV     R7,data_packet_length
00DE 7E00              MOV     R6,#00H
00E0 7B01              MOV     R3,#01H
00E2 7A00        R     MOV     R2,#HIGH data_packet_buffer
00E4 7900        R     MOV     R1,#LOW data_packet_buffer
00E6 C003              PUSH    AR3
00E8 C002              PUSH    AR2
00EA C001              PUSH    AR1
00EC 7B01              MOV     R3,#01H
00EE 7A00        E     MOV     R2,#HIGH g_rx
00F0 7900        E     MOV     R1,#LOW g_rx
00F2 A801              MOV     R0,AR1
00F4 AC02              MOV     R4,AR2
00F6 AD03              MOV     R5,AR3
00F8 D001              POP     AR1
00FA D002              POP     AR2
00FC D003              POP     AR3
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 9   

00FE 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 189
0101 AF00        R     MOV     R7,data_packet_length
0103 7E00              MOV     R6,#00H
0105 900000      E     MOV     DPTR,#g_rx+080H
0108 EE                MOV     A,R6
0109 F0                MOVX    @DPTR,A
010A A3                INC     DPTR
010B EF                MOV     A,R7
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
010D 900000      E     MOV     DPTR,#g_rx+084H
0110 7401              MOV     A,#01H
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0113 120000      E     LCALL   commProcess
                                           ; SOURCE LINE # 192
0116         ?C0022:
                                           ; SOURCE LINE # 194
0116 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 195
0119 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 196
011C 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 197
011F 0500        R     INC     package_count
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0121 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 203
0124         ?C0023:
                                           ; SOURCE LINE # 204
0124 1500        R     DEC     data_packet_length
0126 AF00        R     MOV     R7,data_packet_length
0128 EF                MOV     A,R7
0129 6003              JZ      $ + 5H
012B 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 205
012E 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 206
0131 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 207
0134 7F01              MOV     R7,#01H
0136 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 208
0139 7F00              MOV     R7,#00H
013B 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 209
013E 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 210
0141 0500        R     INC     package_count
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0143 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0146 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 215
0149         ?C0025:
0149 22                RET     
             ; FUNCTION interrupt_manager (END)

C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 10  

             ; FUNCTION function_scheduler (BEGIN)
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 226
0000 120000      E     LCALL   MY_TIMER_ReadCounter
0003 900000      E     MOV     DPTR,#timer_value0
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 229
0009 7F01              MOV     R7,#01H
000B 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 233
000E 300005            JNB     interrupt_flag,?C0026
                                           ; SOURCE LINE # 234
0011 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 235
0013 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 236
0016         ?C0026:
                                           ; SOURCE LINE # 238
0016 120000      E     LCALL   ReadAllIMUs
                                           ; SOURCE LINE # 240
0019 120000      R     LCALL   analog_read_end
                                           ; SOURCE LINE # 242
001C 300005            JNB     interrupt_flag,?C0027
                                           ; SOURCE LINE # 243
001F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 244
0021 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 245
0024         ?C0027:
                                           ; SOURCE LINE # 248
0024 7B01              MOV     R3,#01H
0026 7A00        E     MOV     R2,#HIGH g_imuNew
0028 7900        E     MOV     R1,#LOW g_imuNew
002A C003              PUSH    AR3
002C C002              PUSH    AR2
002E C001              PUSH    AR1
0030 7B01              MOV     R3,#01H
0032 7A00        E     MOV     R2,#HIGH g_imu
0034 7900        E     MOV     R1,#LOW g_imu
0036 A801              MOV     R0,AR1
0038 AC02              MOV     R4,AR2
003A AD03              MOV     R5,AR3
003C D001              POP     AR1
003E D002              POP     AR2
0040 D003              POP     AR3
0042 7E02              MOV     R6,#02H
0044 7F75              MOV     R7,#075H
0046 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 250
0049 300005            JNB     interrupt_flag,?C0028
                                           ; SOURCE LINE # 251
004C C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 252
004E 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 253
0051         ?C0028:
                                           ; SOURCE LINE # 255
0051 120000      E     LCALL   MY_TIMER_ReadCounter
0054 900000      E     MOV     DPTR,#timer_value
0057 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 256
005A 7F40              MOV     R7,#040H
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 11  

005C 7E4B              MOV     R6,#04BH
005E 7D4C              MOV     R5,#04CH
0060 7C00              MOV     R4,#00H
0062 120000      E     LCALL   _MY_TIMER_WriteCounter
                                           ; SOURCE LINE # 258
0065 22                RET     
             ; FUNCTION function_scheduler (END)

             ; FUNCTION analog_read_end (BEGIN)
                                           ; SOURCE LINE # 264
0000         ?C0030:
                                           ; SOURCE LINE # 266
0000 120000      E     LCALL   ADC_STATUS_Read
0003 EF                MOV     A,R7
0004 700A              JNZ     ?C0031
                                           ; SOURCE LINE # 267
0006 3000F7            JNB     interrupt_flag,?C0030
                                           ; SOURCE LINE # 268
0009 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 269
000B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
000E 80F0              SJMP    ?C0030
0010         ?C0031:
                                           ; SOURCE LINE # 273
0010 900000      E     MOV     DPTR,#ADC_buf
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      E     MOV     DPTR,#sensor_value_1
001B EE                MOV     A,R6
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0020 900000      E     MOV     DPTR,#ADC_buf+02H
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 900000      E     MOV     DPTR,#sensor_value_2
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
0030 300005            JNB     interrupt_flag,?C0034
                                           ; SOURCE LINE # 277
0033 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 278
0035 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 281
0038         ?C0034:
0038 22                RET     
             ; FUNCTION analog_read_end (END)
C51 COMPILER V9.51   INTERRUPTIONS                                                         04/01/2019 12:07:27 PAGE 12  




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    492    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
